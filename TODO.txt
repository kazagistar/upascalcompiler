Milestone 2
===========
1. Driver that takes paramter text file [jake]
2. getNext (dispatcher) [jake] - should be done
3. Printer change the print format, and allow for printing of errors [brad] - should be done
4. FSAs
	- number (int, float, fixed) [brad] (should be about done, must polish though)
	- string [brad]  -should be done
	- comment [andy] -should be done
	- identifier [andy] -should be done
		- reserved test [andy] -should be done
	- symbol [jake] -looks done


Milestone 3
===========
1. Identifiers [andy]
	- reserved word case insensitive -should be done
	- reserved words table -believe this is done as a terrible code...Is this the hash function?
2. Comments [andy] -should be done
	- Ignore while scanning -should be done
	- Error checking for runaway comments -should be done
3. String [brad] -believed to be done
	- Exclude apostrophe from string (hack off ends in scanString()) -should be done
	- Double apostrophe escape/purge -should be done
	- Watch for runaway strings (token = MP_RUN_STRING) look at directions for details. -should be done 
4. Errors
	- String error [brad] - should be done (i did the printing of the error message in the scanString() method before the return of the lexeme)
	- Comment error [andy] - should be done in the printing of the error message
	- No fsa [jake]
	- No accept state [must be put in all FSA methods as a new state, the gutz should be the same in all methods] [all] -(brad: "I implemented this in the scanner stream itself, so wont need to be done in each individual FSA) Note: double check that the scanner pointer is in correct location after emit() (assuming error)
5. Fix print syntax
	- Also add ^
6. Finish token enum [all]
7. Create test cases/testing [all]
8. Make source code pdf [jake]


Milestone 4
===========
- Brad rules 1-43 (DONE! There are some lookaheads I could not determine, but I figured out most of them, i left comments at the ones that hold "dummy" values)
- Jake rules 44-81
- Andy rules 82-115

Each "NonTerminal left hand side" gets its own method, 
Each "righthandside" gets its own case in the method.
when a rule points to empty string (epsilon) the rule in the case statement = "default: return;" and there is no error() call, an error will be found higher up the tree (if there is one at all)